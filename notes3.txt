delobj=obj.Add; delobj=obj.Multiply;

---foreach(delegate i in delobj.GetInvocationList())
		{
			console.writeline(i.Method(),item(10,2));//method name then return value
		}		
		
-----MULTICAST DELEGATES--------------------
____________________________________________________________________________________________________________________________________________________________________
-----anonymous methods are used to do inline function call without specifying function def. using delegate keyword.--

	**				DiscountDelegate dd=delegate(double amount)
					{
						return amount*10;
					};
					dd(10);
					
					or
					
					dd.Invoke(10);
_____________________________________________________________________________________________________________________________________________________________________
----------Lambda-------
*****(Input Parameters)=>(expression or statements or block)-------
	two type of lambda --statement(same as anonymous) and expression(small code) lambda--
------		Lambda Expression can have either----
			*	no parameter
			*	one parameter
			*	multiple parameters enclosed in parenthesis
			
	for example----obj=()=>(console.writeline("hello");)--page 130
	
	*****It can be used to call another static method ---categoryId => FetchProductsCount(categoryId);******
	
____________________________________________________________________________________________________________________________________________________________________
	delegates have some disadvantage------
	overcome by --
	*	Func<>///always have 1 parameter for output type //can have 0-16 input parameter//Func<int,int>=x=>x*x*x;
	*	Action<>///takes 1-16 input min.1 parameter for input //can have 0 output parameter or 0 input parameter if it is a static function
				/used where you want to just print out something //Action delegate can point to those methods whose return type is void
	*	Predicate<>
		*Works similar to Func<T, out TResult> delegate//out result will always be boolean thats why that wont be used as parameter//
		*Must contain a set of criteria to check whether the passed parameter meets those criteria or not
		*Represents a delegate which has one input parameter of type T and the return type is always bool
		----Predicate<int> isEven=n=>n%2==0;		
____________________________________________________________________________________________________________________________________________________________________
--------Extensions------
**String Extension-----
							public static class StringExtension
							{
								public static string ConvertToPascalCase(this string inputProduct)
								{
									string[] splittedProduct = inputProduct.Split(' ');
									var sb = new StringBuilder();
									char[] splittedProductChars;
									foreach (String s in splittedProduct)
									{
										splittedProductChars = s.ToCharArray();
										if (splittedProductChars.Length > 0)
										{
											splittedProductChars[0] = ((new String(splittedProductChars[0], 1)).ToUpper().ToCharArray())[0];
										}
										sb.Append(new String(splittedProductChars));
										sb.Append(" ");
									}
									return sb.ToString().TrimEnd();
								}
							}
							class Program
							{
								static void Main(string[] args)
								{
									string message = "this is an example for demonstrating how extension methods work";
									Console.WriteLine(message.ConvertToPascalCase());
								}
							}
	Make a static class --then make a static method --this keyword is passed in parameter in definition with data type on which we are working 
	---it will work as a method for your data type not for class--like int a=4; 	a.extendedmethod();//
______________________________________________________________________________________________________________________________________________________________________________________
							******************LINQ****************
----------	from / in - Specifies the data source
			where - Conditional boolean expression (Example: product.Price > 0)
			orderby (ascending/descending) - Sorts the results into ascending or descending order
			select - Adds the result to the return type
			group / by - Groups the results based on a given key
			////QUERY START WITH FROM ENDS WITH SELECT LIKE //////
															***	/////VAR PRODUCT=(FROM P IN PRODUCT 
																					SELECT P.PRODUCTNAME);*****
	THE QUERY WILL BE VALID AND WORK TILL THE PROGRAM ENDS...//LIKE IF YOU CHANGE(ADD,DELETE) ANYTHING FROM LIST THE QUERY WILL AUTOMATICALLY ADJUST THE VALUES																				
																					
	///THE QUERY WILL EXECUTED WHEN THE VARIABLE WILL BE CALLED(ACCESS THE VARIABLE),THE QUERY WHEN DECLARED WITH QUERY IS JUST POINTING TO THE QUERY////		
****************FOR SELECTING MULTIPLE VARIABLE(COLUMNS) WE HAVE TO USE NEW KEYWORD FOLLOWED BY BRACES .....(SELECT NEW{A,B,C,D};)//THIS WILL RETURN OBJECT TYPE VARIABLE	






	
	
